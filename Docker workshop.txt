Docker workshop, ca. 3 timer

** Før alle kommer må de installere nyeste vagrant og hente vår Vagrantfile og kjøre "vagrant up". **

1. First steps
	Talk: Introduksjon til Docker
		Drømmen: docker run "whatever-service"
		Bruk presentasjonen på docker.io, frem til VM-sammenlikningen
		Klient/server (Stian: Trenger vi å se det? Eller nevne det for OSX?)
		Image/container
			Image er et utganspunkt
			Container er en kjørende instans
		Gjennomgang av kommandoer/livssyklus: (Kjør dette og kopier output inn i presentasjonen)
			pull --tag="latest" ubuntu 	# fra docker index
			images --tree
			run ubuntu --interactive --tty /bin/bash
			... do stuff inside container ...
			ps --all
			start --attach --interactive CONTAINER-ID
			... do stuff inside container ...
			diff
			commit
			images -t
	Oppgaver: pre-Dockerfile
		Kjør echo "hello world"
		Kjør bash interaktivt
		Installer java
		Diff
		Commit

2. Dockerfile
	Talk: Dockerfile
		Motivasjon
		FROM & RUN
	Oppgaver: Dockerfile
		Gjør det samme som tidligere, men nå vha. Dockerfile

3. Deployment
	Talk: deploy en app med Docker
		ENTRYPOINT
		USER
		EXPOSE
		ADD (insert)
	Oppgaver: lag en dockerfile med en Java-app, start den og besøk den i nettleseren
	Oppgave?: Mount lokal disk for å lagre loggfiler

4. Multiple containers
	Talk: web server
		link
	Oppgaver: utvid Java-appen med database



1:
attach    Attach to a running container  
commit    Create a new image from a container's changes
diff      Inspect changes on a container's filesystem
history   Show the history of an image
images    List images
logs      Fetch the logs of a container
port      Lookup the public-facing port which is NAT-ed to PRIVATE_PORT
ps        List containers
pull      Pull an image or a repository from the docker registry server
run       Run a command in a new container
	--detach
	--interactive
	--tty
start     Start a stopped container
stop      Stop a running container
top       Lookup the running processes of a container

2:
build     Build a container from a Dockerfile

3:
cp        Copy files/folders from the containers filesystem to the host path
events    Get real time events from the server
export    Stream the contents of a container as a tar archive
import    Create a new filesystem image from the contents of a tarball
info      Display system-wide information
insert    Insert a file in an image
inspect   Return low-level information on a container
kill      Kill a running container
load      Load an image from a tar archive
login     Register or Login to the docker registry server
push      Push an image or a repository to the docker registry server
restart   Restart a running container
rm        Remove one or more containers
rmi       Remove one or more images
save      Save an image to a tar archive
search    Search for an image in the docker index
tag       Tag an image into a repository
wait      Block until a container stops, then print its exit code
version   Show the docker version information
